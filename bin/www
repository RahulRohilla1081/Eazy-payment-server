// #!/usr/bin/env node

// /**
//  * Module dependencies.
//  */

// var app = require("../app");
// var debug = require("debug")("server:server");
// var http = require("http");
// // var https = require("https");
// const fs = require('node:fs');
// // const auto_draft_cleanup_API_call = require("../auto_draft_cleanup_projects/auto_draft_cleanup_API_call");
// // const weekly_report_mail_APIs_call = require("../reports_scheduler/weekly_report_mail_APIs_call");
// const PaymentScheduler = require("../apis/PaymentUpdates/PaymentScheduler");
// const ShiftPaymentScheduler = require("../apis/ShiftPayments/ShiftPaymentScheduler");

// /**
//  * Get port from environment and store in Express.
//  */

// var port = normalizePort(process.env.PORT || "7001");
// app.set("port", port);

// /**
//  * Create HTTP server.
//  */
// var https_options = {
//   key: fs.readFileSync(__dirname+"/private.key"),
//   cert: fs.readFileSync(__dirname+"/EndEntity_timesheet.samishti.com.crt"),
//   ca: [
//   fs.readFileSync(__dirname+'/CA_root.crt'),
//   fs.readFileSync(__dirname+'/ca_bundle_certificate.crt')
//   ]
//   }
// const options = {
//   pfx: fs.readFileSync(__dirname + "/timesheet.pfx"),
   
//    passphrase: 'timesheet',
//  };

// // var server = https.createServer(options,app);
// var server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(
//   port,
//   PaymentScheduler(),
//   ShiftPaymentScheduler(),
//   // , auto_draft_cleanup_API_call
//   // weekly_report_mail_APIs_call()
// );
// server.on("error", onError);
// server.on("listening", onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== "listen") {
//     throw error;
//   }

//   var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case "EACCES":
//       console.error(bind + " requires elevated privileges");
//       process.exit(1);
//       break;
//     case "EADDRINUSE":
//       console.error(bind + " is already in use");
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
//   debug("Listening on " + bind);
//   console.log("Listening on "+bind);
// }
